<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Tab Control -->
    <Style TargetType="TabControl">
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="Padding" Value="2"/>
    </Style>
    
    <!-- Tab Item -->
    <Style TargetType="TabItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <!-- Content -->
                    <Border Name="Border" BorderThickness="1, 1, 1, 0" BorderBrush="Gainsboro" CornerRadius="5, 5, 0, 0" Margin="1, 0">
                        <ContentPresenter ContentSource="Header" Margin="20, 3"/>
                    </Border>

                    <!-- Triggers -->
                    <ControlTemplate.Triggers>
                        <!-- Is Selected -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#88CFFD"/>
                        </Trigger>
                        
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="GhostWhite"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- List Box -->
    <Style TargetType="ListBox">
        <Setter Property="BorderBrush" Value="Gainsboro"/>
    </Style>
    
    <!-- Tree View -->
    <Style TargetType="TreeView">
        <Setter Property="BorderBrush" Value="Gainsboro"/>
       
    </Style>

    <!-- Border -->
    <Style x:Key="BorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!-- Label -->
    <Style TargetType="Label">
        <Setter Property="Padding" Value="0"/>
    </Style>

    <Style x:Key="ExpanderHeaderStyle" TargetType="Label" BasedOn="{ StaticResource {x:Type Label} }">
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>

    <Style x:Key="LabelHeaderStyle" TargetType="Label" BasedOn="{ StaticResource { x:Type Label } }">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="62"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="0, 0, 2, 0"/>
    </Style>

    <Style x:Key="LabelValueStyle" TargetType="Label" BasedOn="{ StaticResource { x:Type Label } }">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Height" Value="22"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <!-- Content -->
                    <Border Style="{ StaticResource BorderStyle }" Background="GhostWhite">
                        <ContentPresenter ContentSource="Content" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Buton -->
    <Style TargetType="Button">
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="Background" Value="GhostWhite"/>
        <Setter Property="Height" Value="22"/>
    </Style>

    <Style x:Key="SmallButtonStyle" TargetType="Button" BasedOn="{ StaticResource {x:Type Button} }">
        <Setter Property="Width" Value="40"/>
    </Style>

    <Style x:Key="MiniButtonStyle" TargetType="Button" BasedOn="{ StaticResource {x:Type Button} }">
        <Setter Property="Width" Value="26"/>
    </Style>
    
    <!-- Toggle Button -->
    <Style TargetType="ToggleButton">
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="Background" Value="GhostWhite"/>
        <Setter Property="Height" Value="22"/>
    </Style>

    <Style x:Key="MiniToggleButtonStyle" TargetType="ToggleButton" BasedOn="{ StaticResource {x:Type ToggleButton} }">
        <Setter Property="Width" Value="26"/>
    </Style>

    <!-- Expander -->
    <Style TargetType="Expander">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Margin" Value="1"/>
    </Style>
    
    <!-- Combo Box -->
    <Style TargetType="ComboBox">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="Background" Value="GhostWhite"/>
        <Setter Property="Height" Value="22"/>
    </Style>

    <!-- Check Box -->
    <Style TargetType="CheckBox">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Text Box -->
    <Style TargetType="TextBox">
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Height" Value="22"/>
    </Style>

    <Style x:Key="TextBoxCenterValue" TargetType="TextBox" BasedOn="{ StaticResource {x:Type TextBox} }">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>
    
    <!-- Path -->
    <Style x:Key="PathStyle" TargetType="Path">
        <Setter Property="Fill" Value="Gray"/>
        <Setter Property="Stretch" Value="Uniform"/>
        <Setter Property="Width" Value="12"/>
        <Setter Property="Height" Value="12"/>
    </Style>
    
    <!-- Default Styles -->
    
    <!-- Tree View Item -->
    <Style x:Key="TreeViewItemControl" TargetType="{ x:Type TreeViewItem }">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Border x:Name="Bd">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="Width" Value="16"/>
                                        <Setter Property="Height" Value="16"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border Background="Transparent" Height="16" Padding="5" Width="16">
                                                        <Path x:Name="ExpandPath" Data="M0,0 L0,6 L6,0 z" Fill="Transparent" Stroke="#FF989898">
                                                            <Path.RenderTransform>
                                                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                                            </Path.RenderTransform>
                                                        </Path>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                                                <Setter.Value>
                                                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                                                        </Trigger>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                                                            <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
                                                        </Trigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                                <Condition Property="IsChecked" Value="True"/>
                                                            </MultiTrigger.Conditions>
                                                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                                                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                                        </MultiTrigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Border Grid.Row="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{ TemplateBinding Header }" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Tree View Item -->
    <Style TargetType="TreeViewItem" BasedOn="{ StaticResource TreeViewItemControl }">
        <Setter Property="Header" Value="{ Binding Path=Name, Mode=OneWay }"/>
    </Style>
</ResourceDictionary>